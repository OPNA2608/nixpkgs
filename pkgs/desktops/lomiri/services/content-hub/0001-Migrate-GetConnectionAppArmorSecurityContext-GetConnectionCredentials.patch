From b6f71a87e938db95c774b01cc6d439a3db6cf01d Mon Sep 17 00:00:00 2001
From: OPNA2608 <christoph.neidahl@gmail.com>
Date: Sat, 21 Oct 2023 00:28:42 +0200
Subject: [PATCH] Migrate from GetConnectionAppArmorSecurityContext to
 GetConnectionCredentials, check for D-Bus mediation via AppArmor

See https://lists.ubuntu.com/archives/foundations-bugs/2015-August/250429.html for details.
Based on https://bazaar.launchpad.net/~online-accounts/ubuntu-system-settings-online-accounts/trunk/revision/397/online-accounts-service/utils.cpp

In addition to migrating to GetConnectionCredentials, added a check for AppArmor D-Bus feature which indicates D-Bus mediation support.
If AppArmor feature is not present, treat as unconfined.
---
 src/com/lomiri/content/utils.cpp | 61 ++++++++++++++++++++++++++++----
 1 file changed, 54 insertions(+), 7 deletions(-)

diff --git a/src/com/lomiri/content/utils.cpp b/src/com/lomiri/content/utils.cpp
index 737c16e..91ef008 100644
--- a/src/com/lomiri/content/utils.cpp
+++ b/src/com/lomiri/content/utils.cpp
@@ -26,6 +26,8 @@
 #include <QtCore>
 #include <QtDBus/QDBusMessage>
 #include <QtDBus/QDBusConnection>
+#include <QtDBus/QDBusError>
+#include <QtDBus/QDBusReply>
 #include <QUrl>
 #include <lomiri/util/Dbus.h>
 
@@ -253,23 +255,68 @@ QMap<QString, QString> info_for_app_id(QString id)
 QString aa_profile(QString uniqueConnectionId, QString returnValueOnError = QString())
 {
     TRACE() << Q_FUNC_INFO << uniqueConnectionId;
+
+    /* Check if dbus mediation via AppArmor is active */
     QDBusMessage msg =
+        QDBusMessage::createMethodCall("org.freedesktop.DBus",
+                                       "/org/freedesktop/DBus",
+                                       "org.freedesktop.DBus.Properties",
+                                       "Get");
+    msg << "org.freedesktop.DBus" << "Features";
+
+    QDBusReply<QDBusVariant> replyAaMediation =
+        QDBusConnection::sessionBus().call(msg, QDBus::Block);
+    if (replyAaMediation.isValid()) {
+        QStringList list = replyAaMediation.value().variant().toStringList();
+        bool aaMediationInUse = false;
+        QString aaMediationFeature = QStringLiteral("AppArmor");
+
+        for (QString& feature : list) {
+            TRACE() << "D-Bus has feature:" << feature;
+            if (feature == aaMediationFeature) {
+                TRACE() << "D-Bus supports mediation via AppArmor";
+                aaMediationInUse = true;
+                break;
+            }
+        }
+
+        if (!aaMediationInUse) {
+            qWarning() << "D-Bus mediation via AppArmor is not in use";
+            return returnValueOnError;
+        }
+    } else {
+        QDBusError error = replyAaMediation.error();
+        qWarning() << "Error checking for D-Bus mediation via AppArmor:" <<
+            error.name() << error.message();
+        return returnValueOnError;
+    }
+
+    msg =
         QDBusMessage::createMethodCall("org.freedesktop.DBus",
                                        "/org/freedesktop/DBus",
                                        "org.freedesktop.DBus",
-                                       "GetConnectionAppArmorSecurityContext");
+                                       "GetConnectionCredentials");
     QString aaProfile;
     QVariantList args;
     args << uniqueConnectionId;
     msg.setArguments(args);
-    QDBusMessage reply =
+    QDBusReply<QVariantMap> replyCredentials =
         QDBusConnection::sessionBus().call(msg, QDBus::Block);
-    if (reply.type() == QDBusMessage::ReplyMessage) {
-        aaProfile = reply.arguments().value(0, QString()).toString();
-        TRACE() << "AppArmor Profile:" << aaProfile;
+    if (replyCredentials.isValid()) {
+        QVariantMap map = replyCredentials.value();
+        QByteArray context = map.value("LinuxSecurityLabel").toByteArray();
+        if (!context.isEmpty()) {
+            aa_splitcon(context.data(), NULL);
+            aaProfile = QString::fromUtf8(context);
+            TRACE() << "AppArmor Profile:" << aaProfile;
+        } else {
+            qWarning() << "No LinuxSecurityLabel found in AppArmor reply";
+            return returnValueOnError;
+        }
     } else {
-        qWarning() << "Error getting app ID:" << reply.errorName() <<
-            reply.errorMessage();
+        QDBusError error = replyCredentials.error();
+        qWarning() << "Error getting app ID:" << error.name() <<
+            error.message();
         return returnValueOnError;
     }
 
-- 
2.40.1

