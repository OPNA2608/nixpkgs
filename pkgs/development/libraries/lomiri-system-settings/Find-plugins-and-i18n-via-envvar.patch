From bfd51570823dce8fb382975b434f38674a27d4b0 Mon Sep 17 00:00:00 2001
From: Puna2608 <opna2608@protonmail.com>
Date: Sun, 26 Mar 2023 17:05:28 +0200
Subject: [PATCH] Find plugins and i18n via envvar

---
 src/main.cpp   | 47 ++++++++++++++++++++++++++++++
 src/plugin.cpp | 77 +++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 117 insertions(+), 7 deletions(-)

diff --git a/src/main.cpp b/src/main.cpp
index 64441da3..86fda660 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -23,6 +23,7 @@
 #include "plugin-manager.h"
 #include "utils.h"
 
+#include <QDebug>
 #include <QByteArray>
 #include <QApplication>
 #include <QProcessEnvironment>
@@ -34,6 +35,31 @@
 #include <QtQml/QQmlDebuggingEnabler>
 static QQmlDebuggingEnabler debuggingEnabler(false);
 
+// Taken from qtdeclarative's
+static QStringList parseEnvPath(const QString &envImportPath)
+{
+    if (QDir::listSeparator() == u':') {
+        // Double colons are interpreted as separator + resource path.
+        QStringList paths = envImportPath.split(u':');
+        bool wasEmpty = false;
+        for (auto it = paths.begin(); it != paths.end();) {
+            if (it->isEmpty()) {
+                wasEmpty = true;
+                it = paths.erase(it);
+            } else {
+                if (wasEmpty) {
+                    it->prepend(u':');
+                    wasEmpty = false;
+                }
+                ++it;
+            }
+        }
+        return paths;
+    } else {
+        return envImportPath.split(QDir::listSeparator(), Qt::SkipEmptyParts);
+    }
+}
+
 using namespace LomiriSystemSettings;
 
 int main(int argc, char **argv)
@@ -78,6 +104,27 @@ int main(int argc, char **argv)
     qmlRegisterType<LomiriSystemSettings::PluginManager>("SystemSettings", 1, 0, "PluginManager");
     view.engine()->rootContext()->setContextProperty("Utilities", &utils);
     view.setResizeMode(QQuickView::SizeRootObjectToView);
+
+    qInfo() << "[Nix] Checking for NIX_LSS_PLUGIN_PRIVATE_MODULE_DIR";
+    if (environment.contains(QLatin1String("NIX_LSS_PLUGIN_PRIVATE_MODULE_DIR"))) {
+        qInfo() << "[Nix] Found NIX_LSS_PLUGIN_PRIVATE_MODULE_DIR";
+        const QStringList nixPrivateModuleDirs = parseEnvPath (environment.value(QLatin1String("NIX_LSS_PLUGIN_PRIVATE_MODULE_DIR")));
+        for (int i = nixPrivateModuleDirs.size() - 1; i >= 0; --i) {
+            qInfo() << "[Nix] Adding import path " << nixPrivateModuleDirs.at(i);
+            view.engine()->addImportPath(nixPrivateModuleDirs.at(i));
+        }
+    }
+
+    qInfo() << "[Nix] Checking for NIX_LSS_PLUGIN_QML_DIR";
+    if (environment.contains(QLatin1String("NIX_LSS_PLUGIN_QML_DIR"))) {
+        qInfo() << "[Nix] Found NIX_LSS_PLUGIN_QML_DIR";
+        const QStringList nixPluginQmlDirs = parseEnvPath (environment.value(QLatin1String("NIX_LSS_PLUGIN_QML_DIR")));
+        for (int i = nixPluginQmlDirs.size() - 1; i >= 0; --i) {
+            qInfo() << "[Nix] Adding import path " << nixPluginQmlDirs.at(i);
+            view.engine()->addImportPath(nixPluginQmlDirs.at(i));
+        }
+    }
+
     view.engine()->addImportPath(mountPoint + PLUGIN_PRIVATE_MODULE_DIR);
     view.engine()->addImportPath(mountPoint + PLUGIN_QML_DIR);
     view.rootContext()->setContextProperty("defaultPlugin", defaultPlugin);
diff --git a/src/plugin.cpp b/src/plugin.cpp
index 133821af..34610198 100644
--- a/src/plugin.cpp
+++ b/src/plugin.cpp
@@ -21,6 +21,11 @@
 #include "plugin.h"
 #include "debug.h"
 
+#include <QDebug>
+#include <QProcessEnvironment>
+namespace C {
+#include <libintl.h>
+}
 #include <QEventLoop>
 #include <QDir>
 #include <QFileInfo>
@@ -38,7 +43,42 @@
 
 using namespace LomiriSystemSettings;
 
-static const QLatin1String pluginModuleDir{PLUGIN_MODULE_DIR};
+// Taken from qtdeclarative's
+static QStringList parseEnvPath(const QString &envImportPath)
+{
+    if (QDir::listSeparator() == u':') {
+        // Double colons are interpreted as separator + resource path.
+        QStringList paths = envImportPath.split(u':');
+        bool wasEmpty = false;
+        for (auto it = paths.begin(); it != paths.end();) {
+            if (it->isEmpty()) {
+                wasEmpty = true;
+                it = paths.erase(it);
+            } else {
+                if (wasEmpty) {
+                    it->prepend(u':');
+                    wasEmpty = false;
+                }
+                ++it;
+            }
+        }
+        return paths;
+    } else {
+        return envImportPath.split(QDir::listSeparator(), Qt::SkipEmptyParts);
+    }
+}
+
+static QLatin1String getPluginModuleDirs(void) {
+    QLatin1String pluginModuleDir{PLUGIN_MODULE_DIR};
+    qInfo() << "[Nix] Checking for NIX_LSS_PLUGIN_MODULE_DIR";
+    QProcessEnvironment environment = QProcessEnvironment::systemEnvironment();
+    if (environment.contains(QLatin1String("NIX_LSS_PLUGIN_MODULE_DIR"))) {
+        qInfo() << "[Nix] Found NIX_LSS_PLUGIN_MODULE_DIR";
+        pluginModuleDir = QLatin1String(environment.value(QLatin1String("NIX_LSS_PLUGIN_MODULE_DIR")).toLatin1());
+    }
+    return pluginModuleDir;
+}
+
 static const QLatin1String pluginQmlDir{QML_DIR};
 
 namespace LomiriSystemSettings {
@@ -110,12 +150,24 @@ bool PluginPrivate::ensureLoaded() const
         ctx->contextProperty("mountPoint").value<QByteArray>() :
         "";
 
-    QString name = QString("%1%2/lib%3.so")
-        .arg(mountPoint).arg(pluginModuleDir).arg(plugin);
-
-    m_loader.setFileName(name);
-    if (Q_UNLIKELY(!m_loader.load())) {
-        qWarning() << m_loader.errorString() << name;
+    QString name = QString("%1%3/lib%2.so")
+        .arg(mountPoint).arg(plugin);
+
+    const QStringList pluginModuleDirs = parseEnvPath(getPluginModuleDirs());
+    bool pluginLoaded = false;
+    for (int i = pluginModuleDirs.size() - 1; i >= 0; --i) {
+        QString pluginName = QString(name).arg(pluginModuleDirs.at(i));
+        m_loader.setFileName(pluginName);
+        if (!m_loader.load()) {
+            qWarning() << m_loader.errorString() << pluginName;
+            continue;
+        }
+        qInfo() << "[Nix] Loaded plugin " << pluginName;
+        pluginLoaded = true;
+        break;
+    }
+    if (!pluginLoaded) {
+        qInfo() << "[Nix] Gave up on plugin " << plugin;
         return false;
     }
 
@@ -166,6 +218,17 @@ Plugin::Plugin(const QFileInfo &manifest, QObject *parent):
     QObject(parent),
     d_ptr(new PluginPrivate(this, manifest))
 {
+    /*
+     * bind the plugin's locale files
+     * - manifest: <out>/share/lomiri-system-settings/<plugin>.settings
+     * - locales: <out>/share/locale
+     */
+    QDir pluginLocaleDir = manifest.absoluteDir();
+    pluginLocaleDir.cdUp();
+    pluginLocaleDir.cd("locale");
+    std::string pluginLocaleDirStr = pluginLocaleDir.absolutePath().toStdString();
+    std::string pluginTextdomain = this->translations().toStdString();
+    C::bindtextdomain(pluginTextdomain.c_str(), pluginLocaleDirStr.c_str());
 }
 
 Plugin::~Plugin()
-- 
2.39.2

